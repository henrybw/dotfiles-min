#
# I used to use oh-my-zsh, but it was way too bloated and made my shell startup
# times frustratingly slow. So I ripped out all the good bits and threw away the
# rest of oh-my-zsh.
#

#
# Color config
#
autoload colors; colors;
export LSCOLORS="Gxfxcxdxbxegedabagacad"
export LS_COLORS=""
setopt auto_cd
setopt multios

#
# Command history configuration
#
if [[ -z "$HISTFILE" ]]; then
    HISTFILE=$HOME/.zsh_history
fi
HISTSIZE=10000
SAVEHIST=10000
setopt extended_history
setopt hist_expire_dups_first
setopt hist_ignore_dups # ignore duplication command history list
setopt hist_ignore_space
setopt hist_verify
setopt inc_append_history

#
# Keybinding config
#

# Ensures that $terminfo values are valid and updates editor information when
# the keymap changes.
function zle-keymap-select {
  # The terminal must be in application mode when ZLE is active for $terminfo
  # values to be valid.
  if (( ${+terminfo[smkx]} )); then
    printf '%s' ${terminfo[smkx]}
  fi
  if (( ${+terminfo[rmkx]} )); then
    printf '%s' ${terminfo[rmkx]}
  fi

  zle reset-prompt
  zle -R
}

zle -N zle-keymap-select
zle -N edit-command-line

bindkey -v                                            # vi mode
bindkey '\ew' kill-region                             # [Esc-w] - Kill from the cursor to the mark
bindkey -s '\el' 'ls\n'                               # [Esc-l] - run command: ls
bindkey '^r' history-incremental-search-backward      # [Ctrl-r] - Search backward incrementally for a specified string. The string may begin with ^ to anchor the search to the beginning of the line.
if [[ "${terminfo[kpp]}" != "" ]]; then
  bindkey "${terminfo[kpp]}" up-line-or-history       # [PageUp] - Up a line of history
fi
if [[ "${terminfo[knp]}" != "" ]]; then
  bindkey "${terminfo[knp]}" down-line-or-history     # [PageDown] - Down a line of history
fi

if [[ "${terminfo[kcuu1]}" != "" ]]; then
  bindkey "${terminfo[kcuu1]}" up-line-or-search      # start typing + [Up-Arrow] - fuzzy find history forward
fi
if [[ "${terminfo[kcud1]}" != "" ]]; then
  bindkey "${terminfo[kcud1]}" down-line-or-search    # start typing + [Down-Arrow] - fuzzy find history backward
fi

if [[ "${terminfo[khome]}" != "" ]]; then
  bindkey "${terminfo[khome]}" beginning-of-line      # [Home] - Go to beginning of line
fi
if [[ "${terminfo[kend]}" != "" ]]; then
  bindkey "${terminfo[kend]}"  end-of-line            # [End] - Go to end of line
fi

bindkey '^[[1;5C' forward-word                        # [Ctrl-RightArrow] - move forward one word
bindkey '^[[1;5D' backward-word                       # [Ctrl-LeftArrow] - move backward one word

if [[ "${terminfo[kcbt]}" != "" ]]; then
  bindkey "${terminfo[kcbt]}" reverse-menu-complete   # [Shift-Tab] - move through the completion menu backwards
fi

bindkey '^?' backward-delete-char                     # [Backspace] - delete backward
if [[ "${terminfo[kdch1]}" != "" ]]; then
  bindkey "${terminfo[kdch1]}" delete-char            # [Delete] - delete forward
else
  bindkey "^[[3~" delete-char
  bindkey "^[3;5~" delete-char
  bindkey "\e[3~" delete-char
fi

# Edit the current command line in $EDITOR
autoload -U edit-command-line
zle -N edit-command-line
bindkey -M vicmd v edit-command-line

#
# Prompt config
#

setopt promptsubst

# Vi mode indicator
function vi_mode_prompt_info() {
    local MODE_INDICATOR="%{$fg_bold[magenta]%}<%{$reset_color%}%{$fg[magenta]%}<<%{$reset_color%}"
    echo "${${KEYMAP/vicmd/$MODE_INDICATOR}/(main|viins)/}"
}

# Git branch/dirty indicator
function git_status_info() {
    local branch="$(git symbolic-ref --short HEAD 2>/dev/null)"
    if [ "$branch" ]; then
        local git_status="$(git status --untracked-files=no --porcelain 2>/dev/null)"
        if [ "$git_status" ]; then
            local dirty="*";
        fi
        echo " <$branch$dirty>"
    fi
}

# Runs each time before the shell prompt is printed. We override this to allow
# zshrc scripts source'd after this one to hook into the prompt by setting
# $STATUS_EXT. However, we don't allow the prompt itself to be extended because
# that causes too many strange issues with redrawing and such.
function precmd() {
    local _return_code="%(?.%{$fg_bold[green]%}✔ %{$fg[green]%}0 %{$reset_color%}.%{$fg_bold[red]%}✘ %{$fg[red]%}%? %{$reset_color%})"

    # ANSI color range is 0-14, so hash the hostname to a value between that.
    local _host_cksum=$(( ($(echo "`whoami`@`hostname`" | cksum | cut -d\  -f1) / 14) % 14 ))
    local _host_colored="%F{$_host_cksum}[%n@%m]%f"

    # ANSI colors 8-14 mirror colors 0-7, but as bold. Since zsh's %F syntax
    # doesn't take this into account, we'll have to make them bold manually.
    if [[ $_host_cksum -ge 8 ]]; then
        _host_colored="%B${_host_colored}%b"
    fi

    # Since I use dark terminal backgrounds, black on dark doesn't look so good.
    # So in that case, surround the hostname with a white background color.
    #
    # I adjusted my other terminal colors to not be so dark, but if you don't
    # want to do this, you can add a similar background color addition for other
    # darkish colors (e.g. blue, magenta).
    if [[ $(( $_host_cksum % 8 )) -eq 0 ]]; then
        _host_colored="%K{7}${_host_colored}%k"
    fi

    PROMPT="%{${_host_colored}%} %{${fg[green]}%}[%3~]%{$reset_color%}${fg_bold[cyan]}$(git_status_info)$reset_color$STATUS_EXT"$'\n'
    PROMPT="$PROMPT$_return_code%{${fg_bold[blue]}%}$%{${reset_color}%} "
    RPROMPT='$(vi_mode_prompt_info)'
    export PROMPT
    export RPROMPT
}

# Set up completion
autoload -U compinit
compinit -i

# Compile zcompdump if necessary
if [ ~/.zcompdump -nt ~/.zcompdump.zwc -o ! -e ~/.zcompdump.zwc ]; then
  zcompile ~/.zcompdump
fi

#-------------------------------------------------------------------------------

alias l='ls'
alias ls='ls --color'
alias la='ls -a'
alias ll='ls -l'
alias ll='ls -lh'
alias lla='ls -lah'
alias info="info --vi-keys"
alias grep='grep --color=always'
alias egrep='egrep --color=always'
alias tmux='tmux -2'
alias ta='tmux attach-session -t'
alias tl='tmux list-sessions'
alias tn='tmux new-session -s'
alias irssi='TERM=screen-256color irssi'
alias cgdb='TERM=screen-256color cgdb'
alias htop='TERM=screen-256color htop'
alias info='TERM=screen-256color info --vi-keys'
alias g='git'
alias v='vim'
alias lag='ag --pager=less'
alias alert='echo -ne "\a"';

bindkey '^R' history-incremental-search-backward
bindkey '^S' history-incremental-search-forward
bindkey '^[[2~' overwrite-mode              # insert key overwrite mode
bindkey '^[[3~' delete-char                 # delete key fix
if [[ -n "$TMUX" ]]; then
    bindkey '^[[1~' beginning-of-line       # home key
    bindkey '^[[4~' end-of-line             # end key
else
    bindkey '^[[H' beginning-of-line        # home key
    bindkey '^[[F' end-of-line              # end key
fi

export KEYTIMEOUT=1
export EDITOR=vim
export VISUAL=vim
export LESS='-R'

setopt autocd extendedglob notify completeinword
unsetopt sharehistory

zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*:killall:*' command 'ps -u $USER -o cmd'
zstyle ':completion:*' list-colors "${(@s.:.)LS_COLORS}"
zle -A .self-insert self-insert

autoload select-word-style
select-word-style shell

# Crazy pattern-matching batch renaming and moving
autoload -U zmv
alias mmv='noglob zmv -W'

# Don't use Ctrl-S/Ctrl-Q for shell flow control
setopt noflowcontrol
stty stop undef
stty start undef
